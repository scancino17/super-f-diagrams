
    boolean onSegment(Vertex p, Vertex q, Vertex r)
    {
        if (q.getxPos() <= Math.max(p.getxPos(), r.getxPos()) && q.getxPos() >= Math.min(p.getxPos(), r.getxPos()) &&
                q.getyPos() <= Math.max(p.getyPos(), r.getyPos()) && q.getyPos() >= Math.min(p.getyPos(), r.getyPos()))
            return true;
        return false;
    }

    int orientation(Vertex p, Vertex q, Vertex r)
    {
        int val = (q.getyPos() - p.getyPos()) * (r.getyPos() - q.getyPos()) -
                (q.getyPos() - p.getyPos()) * (r.getyPos() - q.getyPos());

        if (val == 0) return 0;  // colinear
        return (val > 0)? 1: 2; // clock or counterclock wise
    }


    boolean doIntersect(Vertex p1, Vertex q1, Vertex p2, Vertex q2)
    {
        // Find the four orientations needed for general and
        // special cases
        int o1 = orientation(p1, q1, p2);
        int o2 = orientation(p1, q1, q2);
        int o3 = orientation(p2, q2, p1);
        int o4 = orientation(p2, q2, q1);

        // General case
        if (o1 != o2 && o3 != o4)
            return true;

        // Special Cases
        // p1, q1 and p2 are colinear and p2 lies on segment p1q1
        if (o1 == 0 && onSegment(p1, p2, q1)) return true;

        // p1, q1 and p2 are colinear and q2 lies on segment p1q1
        if (o2 == 0 && onSegment(p1, q2, q1)) return true;

        // p2, q2 and p1 are colinear and p1 lies on segment p2q2
        if (o3 == 0 && onSegment(p2, p1, q2)) return true;

        // p2, q2 and q1 are colinear and q1 lies on segment p2q2
        if (o4 == 0 && onSegment(p2, q1, q2)) return true;

        return false; // Doesn't fall in any of the above cases
    }


    boolean isInside(List<Vertex> polygon, Vertex p)
    {
        // There must be at least 3 vertices in polygon[]
        if (polygon.size() < 3)  return false;

        // Create a point for line segment from p to infinite
        Vertex extreme = new Vertex(1000000, p.getyPos());

        // Count intersections of the above line with sides of polygon
        int count = 0, i = 0;
        do
        {
            int next = (i+1)%(polygon.size());

            // Check if the line segment from 'p' to 'extreme' intersects
            // with the line segment from 'polygon[i]' to 'polygon[next]'
            if (doIntersect(polygon.get(i), polygon.get(next), p, extreme))
            {
                // If the point 'p' is colinear with line segment 'i-next',
                // then check if it lies on segment. If it lies, return true,
                // otherwise false
                if (orientation(polygon.get(i), p, polygon.get(next)) == 0)
                    return onSegment(polygon.get(i), p, polygon.get(next));

                count++;
            }
            i = next;
        } while (i != 0);

        return (count & 1) == 1 ? true : false;
    }

---------------------------------------------------------------------------------



    boolean InsidePolygon(List<Vertex> polygon, Vertex p)
    {
        int N = polygon.size();
        int counter = 0;
        int i;
        double xinters;
        Vertex p1,p2;

        p1 = polygon.get(0);
        for (i=1;i<=N;i++) {
            p2 = polygon.get(i % N);
            if (p.getyPos() > Math.min(p1.getyPos(),p2.getyPos())) {
                if (p.getyPos() <= Math.max(p1.getyPos(),p2.getyPos())) {
                    if (p.getxPos() <= Math.max(p1.getxPos(),p2.getxPos())) {
                        if (p1.getyPos() != p2.getyPos()) {
                            xinters = (p.getyPos()-p1.getyPos())*(p2.getxPos()-p1.getxPos())/(p2.getyPos()-p1.getyPos())+p1.getxPos();
                            if (p1.getxPos() == p2.getxPos() || p.getxPos() <= xinters)
                                counter++;
                        }
                    }
                }
            }
            p1 = p2;
        }

        return  (counter & 1) == 1 ? true : false;
    }
